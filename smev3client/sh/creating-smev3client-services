#!/bin/bash

log1() {
	echo -e "\\n=============$1=============\\n"
}

log2() {
	echo -e "\\n*******$1*******\\n"
}

echoProgress() {
	echo -ne '#####                     (33%)\r'
	sleep 1
	echo -ne '#############             (66%)\r'
	sleep 1
	echo -ne '#######################   (100%)\r'
	echo -ne '\n'
}

operation=${1}
shift

case $operation in
    clean)
        printf "Removing all the services and infrastructure\n"
        docker service rm $(docker service ls -q)
		sleep 2
		docker volume rm ftpData ftpUsers ftpSmevData ftpSmevUsers postgresData elasticsearchData
		docker network rm smev3client
        ;;

	create)
		log1 "Docker infrastructure section"
		log1 "Creating an overlay network named smev3client and named volumes"
		log1 "Creating overlay network"
		docker network create -d overlay smev3client
		sleep 1
		log1 "Creating named volumes"
		docker volume create --name ftpData
		docker volume create --name ftpUsers
		docker volume create --name ftpSmevData
        docker volume create --name ftpSmevUsers
		docker volume create --name postgresData
		docker volume create --name elasticsearchData

		sleep 1
		log1 "Infrastructure services section"
		echoProgress

		log2 "*******Creating activemq service*******"
		docker service create --name activemq --network smev3client --replicas 1 -p 8161:8161 -p 61616:61616 -p 61613:61613 --env "ACTIVEMQ_MIN_MEMORY=512" --env "ACTIVEMQ_MAX_MEMORY=2048" --env "ACTIVEMQ_NAME=amqp-srv1" --env "ACTIVEMQ_REMOVE_DEFAULT_ACCOUNT=true" --env "ACTIVEMQ_ADMIN_LOGIN=admin" --env "ACTIVEMQ_ADMIN_PASSWORD=admin" --env "ACTIVEMQ_WRITE_LOGIN=producer" --env "ACTIVEMQ_WRITE_PASSWORD=producer" --env "ACTIVEMQ_READ_LOGIN=consumer" --env "ACTIVEMQ_READ_PASSWORD=consumer" --env "ACTIVEMQ_JMX_LOGIN=jmx" --env "ACTIVEMQ_JMX_PASSWORD=jmx" --env "ACTIVEMQ_ENABLED_SCHEDULER=true"  localhost:5000/activemq:1.0

		log2 "*******Creating ftp services*******"
		docker service create --name ftp --network smev3client --replicas 1 --mount type=volume,source=ftpData,destination=/home/ftpusers --mount type=volume,source=ftpUsers,destination=/etc/pure-ftpd/users  -p 2021:2021 -p 30000-30009:30000-30009 --env "PUBLICHOST=ftp" localhost:5000/ftp:1.0
		docker service create --name ftpsmev --network smev3client --replicas 1 --mount type=volume,source=ftpSmevData,destination=/home/ftpusers --mount type=volume,source=ftpSmevUsers,destination=/etc/pure-ftpd/users  -p 3333:3333 -p 30010-30019:30010-30019 --env "PUBLICHOST=ftpsmev" localhost:5000/ftpsmev:1.0

		log2 "*******Creating postgresql service*******"
		docker service create --name postgresql --network smev3client --replicas 1 --mount type=volume,source=postgresData,destination=/var/lib/postgresql/data -p 5432:5432 localhost:5000/postgresql:1.0

		log2 "*******Creating elasticsearch service*******"
		docker service create --name elasticsearch --network smev3client --replicas 1 --mount type=volume,source=elasticsearchData,destination=/usr/share/elasticsearch/data -p 9200:9200 --log-opt max-size=10m --log-opt max-file=10 localhost:5000/elasticsearch:1.0

		log2 "*******Creating logstash service*******"
		docker service create --name logstash --network smev3client --replicas 1 -p 12201:12201 -p 4560:4560 --log-opt max-size=10m --log-opt max-file=10 localhost:5000/logstash:1.0 logstash -f /config-dir/logstash.conf

		log2 "*******Creating curator service*******"
		docker service create --name curator --network smev3client --replicas 1 --log-opt max-size=10m --log-opt max-file=10 localhost:5000/curator:1.0

		log2 "*******Creating cadvisor service*******"
		docker service create --name cadvisor --network smev3client --replicas 1  --mount type=bind,source=/../,destination=/rootfs:ro --mount type=bind,source=/var/run,destination=/var/run:rw --mount type=bind,source=/sys,destination=/sys:ro --mount type=bind,source=/var/lib/docker/,destination=/var/lib/docker:ro -p 8081:8081 localhost:5000/cadvisor:1.0 -port=8081

		log2 "*******Creating kibana service*******"
		docker service create --name kibana --network smev3client --replicas 1 -p 5601:5601 --env "--max-old-space-size=250" --log-opt max-size=10m --log-opt max-file=10 localhost:5000/kibana:1.0
		sleep 1
		log1 "END of infrastructure services section"
		sleep 1

		log1 "Spring cloud infrastructure services section"
		echoProgress

		log2 "*******Creating eureka service*******"
		docker service create --name eureka --network smev3client --replicas 1 -p 8097:8097 --log-opt max-size=10m --log-opt max-file=10 localhost:5000/eureka:1.0

		log2 "*******Creating configserver service*******"
		docker service create --name configserver --network smev3client --replicas 1 -p 8888:8888 --log-opt max-size=10m --log-opt max-file=10 localhost:5000/configserver:1.0

		log2 "*******Creating smev3core service*******"
		docker service create --name smev3core --network smev3client --replicas 1 -p 8093:8093 --log-opt max-size=10m --log-opt max-file=10 localhost:5000/smev3core:1.0

		log2 "*******Creating smev3adapter service*******"
		docker service create --name smev3adapter --network smev3client --replicas 1 -p 8090:8090 --log-opt max-size=10m --log-opt max-file=10 localhost:5000/smev3adapter:1.0

		log2 "*******Creating ufosadapter service*******"
		docker service create --name ufosadapter --network smev3client --replicas 1 -p 8094:8094 --log-opt max-size=10m --log-opt max-file=10 localhost:5000/ufosadapter:1.0

		log2 "*******Creating replication service*******"
		docker service create --name replication --network smev3client --replicas 1 -p 8095:8095 --log-opt max-size=10m --log-opt max-file=10 localhost:5000/replication:1.0

		log2 "*******Creating pollers service*******"
		docker service create --name pollers --network smev3client --replicas 1 -p 8092:8092 -p 5701:5701 --log-opt max-size=10m --log-opt max-file=10 localhost:5000/pollers:1.0

		log2 "*******Creating pushers service*******"
		docker service create --name pushers --network smev3client --replicas 1 -p 8096:8096 --log-opt max-size=10m --log-opt max-file=10 localhost:5000/pushers:1.0

		log2 "*******Creating smev3mock2 service*******"
        docker service create --name smev3mock2 --network smev3client --replicas 1 -p 8091:8091 --log-opt max-size=10m --log-opt max-file=10 localhost:5000/smev3mock2:1.0

		log2 "*******Creating bpmengine service*******"
		docker service create --name bpmengine --network smev3client --replicas 1 -p 8098:8098 --log-opt max-size=10m --log-opt max-file=10 localhost:5000/bpmengine:1.0

		echoProgress
		log1 "Existing networks:"
		docker network ls

		log1 "Existing services:"
		docker service ls

		log1 "Existing volumes:"
		docker volume ls
		sleep 1
		log1 "THE END"
		;;
	*)
        printf "Usage: $(basename $BASH_SOURCE) <command> args...\n"
        printf "\n"
        printf "Commands:\n"
        printf "    create			Create smev3client services and infrastructure\n"
        printf "\n"
        printf "    clean			Clean smev3client services and infrastructure\n"
    ;;
esac





