package ru.otr.integration.smev3client.endpoint;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.Resource;
import org.xml.sax.SAXException;
import ru.it.smev.message_exchange.autogenerated.service.v1_2.*;
import ru.it.smev.message_exchange.autogenerated.types.basic.v1_2.InteractionStatusType;
import ru.it.smev.message_exchange.autogenerated.types.basic.v1_2.MessagePrimaryContent;
import ru.it.smev.message_exchange.autogenerated.types.basic.v1_2.SmevFault;
import ru.it.smev.message_exchange.autogenerated.types.basic.v1_2.Void;
import ru.it.smev.message_exchange.autogenerated.types.v1_2.*;


import java.io.IOException;
import java.io.StringReader;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.CharacterData;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;


/**
 * Created by tartanov.mikhail on 09.08.2016.
 */
public class SMEVMessageExchangeServiceEndpoint implements SMEVMessageExchangePortType{

    @Value("classpath:templates/GetRequestResponse.xml")
    private Resource getRequestResponseTemplate;

    @Override
    public SendRequestResponse sendRequest(SendRequestRequest parameters) throws AccessDeniedException, AttachmentContentMiscoordinationException, AttachmentSizeLimitExceededException, BusinessDataTypeIsNotSupportedException, DestinationOverflowException, EndOfLifeException, InvalidContentException, InvalidMessageIdFormatException, MessageIsAlreadySentException, QuoteLimitExceededException, RecipientIsNotFoundException, SMEVFailureException, SenderIsNotRegisteredException, SignatureVerificationFaultException, StaleMessageIdException, TransactionCodeInvalidException {
        return null;
    }

    @Override
    public SendResponseResponse sendResponse(SendResponseRequest parameters) throws AttachmentContentMiscoordinationException, AttachmentSizeLimitExceededException, BusinessDataTypeIsNotSupportedException, DestinationOverflowException, IncorrectResponseContentTypeException, InvalidContentException, InvalidMessageIdFormatException, MessageIsAlreadySentException, QuoteLimitExceededException, RecipientIsNotFoundException, SMEVFailureException, SenderIsNotRegisteredException, SignatureVerificationFaultException, StaleMessageIdException {
        return null;
    }

    @Override
    public GetRequestResponse getRequest(GetRequestRequest parameters) throws InvalidContentException, SMEVFailureException, SenderIsNotRegisteredException, SignatureVerificationFaultException, UnknownMessageTypeException {

        try {
            JAXBContext jc = JAXBContext.newInstance("ru.it.smev.message_exchange.autogenerated.types.v1_1");
            Unmarshaller unmarshaller = jc.createUnmarshaller();
            GetRequestResponse response = (GetRequestResponse) unmarshaller.unmarshal(getRequestResponseTemplate.getInputStream());
            return response;
        } catch (JAXBException | IOException e) {
            e.printStackTrace();
            throw new InvalidContentException(null, null, e);
        }

        /*DocumentBuilder db = null;
        Document doc = null;
        try {
            db = DocumentBuilderFactory.newInstance().newDocumentBuilder();
            InputSource is = new InputSource();
            is.setEncoding("UTF-8");
            is.setCharacterStream(new StringReader("<ns2:ZadorgRequest ИдЗапрос=\"c51d382a-d5c9-477b-9fd5-1e7d09467e79\" xmlns:ns=\"urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.1\" xmlns:ns1=\"urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.1\" xmlns:ns2=\"urn://x-artefacts-fns-zadorg/root/548-04/4.0.4\" xmlns:ns4=\"urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.1\" xmlns:ns5=\"http://www.otr.com/sufd/smev30SupportService/xml/faultMessage\" xmlns:ns6=\"http://www.otr.com/sufd/smev30SupportService\" xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\">\n" +
                    "                        <ns2:СвЮЛ ИННЮЛ=\"3123116900\" НаимЮЛ=\"Управление Федеральной службы по ветеринарному и фитосанитарному надзору по Белгородской области\" ОГРН=\"3123116900000\"/>\n" +
                    "                        <ns2:ЗапросНП ДатаЗапрСв=\"2016-08-18\">\n" +
                    "                           <ns2:ИННЮЛ>1111111111</ns2:ИННЮЛ>\n" +
                    "                        </ns2:ЗапросНП>\n" +
                    "                     </ns2:ZadorgRequest>"));

            doc = db.parse(is);
        } catch (ParserConfigurationException | SAXException | IOException e) {
            e.printStackTrace();
        }


        MessagePrimaryContent messagePrimaryContent = new MessagePrimaryContent();
        messagePrimaryContent.setAny(doc.getDocumentElement());

        SenderProvidedRequestData senderProvidedRequestData = new SenderProvidedRequestData();
        senderProvidedRequestData.setId("ID_SREQD");
        senderProvidedRequestData.setMessageID("0d9ba260-653e-11e6-a5b0-005056b573ad");
        senderProvidedRequestData.setTransactionCode("c51d382a-d5c9-477b-9fd5-1e7d09467e79");
        senderProvidedRequestData.setMessagePrimaryContent(messagePrimaryContent);



        Request request = new Request();
        request.setId("ID_99d4fef2-4d5c-49d5-94b3-37728cb5e11e");
        request.setSenderProvidedRequestData(senderProvidedRequestData);

        GetRequestResponse.RequestMessage requestMessage = new GetRequestResponse.RequestMessage();
        requestMessage.setRequest(request);

        GetRequestResponse response = new GetRequestResponse();
        response.setRequestMessage(requestMessage);

        return response;*/
    }

    @Override
    public GetStatusResponse getStatus(GetStatusRequest parameters) throws InvalidContentException, SMEVFailureException, SenderIsNotRegisteredException, SignatureVerificationFaultException, UnknownMessageTypeException {

        AsyncProcessingStatus asyncProcessingStatus = new AsyncProcessingStatus();
        asyncProcessingStatus.setOriginalMessageId("e293ea4c-b6bc-476d-ad6c-ac7b9f2c1561");

        AsyncProcessingStatusData asyncProcessingStatusData = new AsyncProcessingStatusData();
        asyncProcessingStatusData.setAsyncProcessingStatus(asyncProcessingStatus);


        SmevAsyncProcessingMessage smevAsyncProcessingMessage = new SmevAsyncProcessingMessage();
        smevAsyncProcessingMessage.setAsyncProcessingStatusData(asyncProcessingStatusData);

        GetStatusResponse response = new GetStatusResponse();
        response.setSmevAsyncProcessingMessage(smevAsyncProcessingMessage);

        return response;
    }

    @Override
    public GetResponseResponse getResponse(GetResponseRequest parameters) throws InvalidContentException, SMEVFailureException, SenderIsNotRegisteredException, SignatureVerificationFaultException, UnknownMessageTypeException {

        GetResponseResponse response = new GetResponseResponse();
        return response;
    }

    @Override
    public Void ack(AckRequest parameters) throws InvalidContentException, SMEVFailureException, SenderIsNotRegisteredException, SignatureVerificationFaultException, TargetMessageIsNotFoundException {
        return null;
    }

    @Override
    public GetIncomingQueueStatisticsResponse getIncomingQueueStatistics(GetIncomingQueueStatisticsRequest parameters) throws InvalidContentException, SMEVFailureException, SenderIsNotRegisteredException, SignatureVerificationFaultException {
        GetIncomingQueueStatisticsResponse response = new GetIncomingQueueStatisticsResponse();
        return response;
    }
}
